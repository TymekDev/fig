% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Fig.R
\name{Fig}
\alias{Fig}
\alias{fig_delete}
\alias{fig_get}
\alias{fig_load_config}
\alias{fig_purge}
\alias{fig_store}
\alias{fig_store_many}
\alias{fig_update_env_prefix}
\title{Create a Fig to Store Config}
\usage{
fig_delete(...)

fig_get(key, split = getOption("fig.split", TRUE))

fig_load_config(cfg, purge = FALSE, split = getOption("fig.split", TRUE))

fig_purge()

fig_store(key, value, split = getOption("fig.split", TRUE))

fig_store_many(..., .purge = FALSE, .split = getOption("fig.split", TRUE))

fig_update_env_prefix(env_prefix)
}
\arguments{
\item{...}{Named values. Names are used as keys for provided values.}

\item{key}{A key to store a value for.}

\item{split}{A logical determining whether dots in \code{key} are treated
specially or as is. See Details section.}

\item{cfg}{(Named list) Names are used as keys for provided values.}

\item{purge}{A logical determining whether to call \code{purge()} before saving
values.}

\item{value}{A value to be stored.}

\item{.purge}{A logical determining whether to call \code{purge()} before saving
values.}

\item{.split}{A logical determining whether dots in \code{key} are treated
specially or as is. See Details section in \code{store()}.}

\item{env_prefix}{(character) A prefix to be prepended to a key before system
environment lookup. Pass an empty string to reset.}
}
\description{
\code{Fig} class is a main driver of this package. For usage details
refer to \code{Fig} methods documentation.

Fig provides a set of exported functions. This makes \code{Fig} class instance
creation optional, and makes the package mimic being a class instance. Those
functions are simple wrappers on an internal \code{Fig} object and are prefixed to
avoid masking.
}
\examples{

## ------------------------------------------------
## Method `Fig$new`
## ------------------------------------------------

fig <- Fig$new()
fig <- Fig$new("RCONNECT_")

## ------------------------------------------------
## Method `Fig$delete`
## ------------------------------------------------

fig <- Fig$new()
fig$store("foo", 1)$store("bar", 2)$store("baz", 3)
fig$get("foo") # == 1
fig$delete("foo")
fig$get("foo") # == NULL
fig$delete("bar", "baz")
fig$get("bar") # == NULL
fig$get("baz") # == NULL

## ------------------------------------------------
## Method `Fig$get`
## ------------------------------------------------

fig <- Fig$new()
fig$store("foo", 1)
fig$get("foo")

fig$store("bar", list(baz = 2))
fig$get("bar.baz")

fig$store("bar.baz", 3)
fig$get("bar.baz") # == 2
fig$get("bar.baz", split = FALSE) # == 3

## ------------------------------------------------
## Method `Fig$load_config`
## ------------------------------------------------

fig <- fig$New()
fig$load_config(list(foo = 1, bar = 2))
fig$load_config(list(foo = 123, baz = "abc"), TRUE)

## ------------------------------------------------
## Method `Fig$purge`
## ------------------------------------------------

fig <- Fig$new()
fig$store("a", 1)$purge()$get("a") # == NULL

## ------------------------------------------------
## Method `Fig$store`
## ------------------------------------------------

fig <- Fig$new()
fig$store("foo", 1)
fig$store("bar", 123)$store("baz", list(1, 2, 3))

fig$store("x.y", "a", FALSE)

## ------------------------------------------------
## Method `Fig$store_many`
## ------------------------------------------------

fig <- Fig$new()
fig$store_many("foo" = 1, "bar" = 2)
fig$store_many("foo.bar.baz" = 1, .split = TRUE)
fig$store_many("foo" = "a", "baz" = 123, .purge = TRUE, .split = TRUE)

## ------------------------------------------------
## Method `Fig$update_env_prefix`
## ------------------------------------------------

fig <- Fig$new()
fig$update_env_prefix("RCONNECT_")
# Reset by passing an empty string
fig$update_env_prefix("")
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Fig$new()}}
\item \href{#method-delete}{\code{Fig$delete()}}
\item \href{#method-get}{\code{Fig$get()}}
\item \href{#method-load_config}{\code{Fig$load_config()}}
\item \href{#method-purge}{\code{Fig$purge()}}
\item \href{#method-store}{\code{Fig$store()}}
\item \href{#method-store_many}{\code{Fig$store_many()}}
\item \href{#method-update_env_prefix}{\code{Fig$update_env_prefix()}}
\item \href{#method-clone}{\code{Fig$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new Fig instance
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$new(env_prefix = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env_prefix}}{(character) A prefix to be prepended to a key before
system environment lookup.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{fig <- Fig$new()
fig <- Fig$new("RCONNECT_")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete"></a>}}
\if{latex}{\out{\hypertarget{method-delete}{}}}
\subsection{Method \code{delete()}}{
Delete stored values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$delete(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Keys to delete values for.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{fig <- Fig$new()
fig$store("foo", 1)$store("bar", 2)$store("baz", 3)
fig$get("foo") # == 1
fig$delete("foo")
fig$get("foo") # == NULL
fig$delete("bar", "baz")
fig$get("bar") # == NULL
fig$get("baz") # == NULL
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
Get a value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$get(key, split = getOption("fig.split", TRUE))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A key to retrieve its corresponding value.}

\item{\code{split}}{A logical determining whether dots in \code{key} are treated
specially or as is. See Details section.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This function returns values based on a following priority
(highest to lowest). If value is not found, then it looks up next level
in the precedence.
\enumerate{
\item System environment variable (case sensitive)
\item Value manually set
}

For system environment lookup dots are replaced by underscores, e.g.
\code{fig$get("foo.bar")} will look up \strong{foo_bar}.

Additionally, Fig treats dots in \code{key} as nest level delimiters.
Therefore, \code{fig$get("foo.bar")} is equivalent to \code{fig$get("foo")$bar}.
This behavior can be disabled either by setting \code{options(fig.split = FALSE)} or by providing \code{split = FALSE} argument.
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{fig <- Fig$new()
fig$store("foo", 1)
fig$get("foo")

fig$store("bar", list(baz = 2))
fig$get("bar.baz")

fig$store("bar.baz", 3)
fig$get("bar.baz") # == 2
fig$get("bar.baz", split = FALSE) # == 3
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-load_config"></a>}}
\if{latex}{\out{\hypertarget{method-load_config}{}}}
\subsection{Method \code{load_config()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$load_config(cfg, purge = FALSE, split = getOption("fig.split", TRUE))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cfg}}{(Named list) Names are used as keys for provided values.}

\item{\code{purge}}{A logical determining whether to call \code{purge()} before
saving values.}

\item{\code{split}}{A logical determining whether dots in \code{key} are treated
specially or as is. See Details section in \code{store()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{fig <- fig$New()
fig$load_config(list(foo = 1, bar = 2))
fig$load_config(list(foo = 123, baz = "abc"), TRUE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-purge"></a>}}
\if{latex}{\out{\hypertarget{method-purge}{}}}
\subsection{Method \code{purge()}}{
Purge stored values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$purge()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{fig <- Fig$new()
fig$store("a", 1)$purge()$get("a") # == NULL
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-store"></a>}}
\if{latex}{\out{\hypertarget{method-store}{}}}
\subsection{Method \code{store()}}{
Store a value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$store(key, value, split = getOption("fig.split", TRUE))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A key to store a value for.}

\item{\code{value}}{A value to be stored.}

\item{\code{split}}{A logical determining whether dots in \code{key} are treated
specially or as is. See Details section.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Fig treats dots in \code{key} as nest level delimiters. Therefore,
\code{fig$store("foo.bar", 1)} is equivalent to \verb{fig$store("foo", list(bar = 1)}.
This behavior can be disabled either by setting \code{options(fig.split = FALSE)} or by providing \code{split = FALSE} argument.
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{fig <- Fig$new()
fig$store("foo", 1)
fig$store("bar", 123)$store("baz", list(1, 2, 3))

fig$store("x.y", "a", FALSE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-store_many"></a>}}
\if{latex}{\out{\hypertarget{method-store_many}{}}}
\subsection{Method \code{store_many()}}{
Set any number of values at once
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$store_many(..., .purge = FALSE, .split = getOption("fig.split", TRUE))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Named values. Names are used as keys for provided values.}

\item{\code{.purge}}{A logical determining whether to call \code{purge()} before
saving values.}

\item{\code{.split}}{A logical determining whether dots in \code{key} are treated
specially or as is. See Details section in \code{store()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{fig <- Fig$new()
fig$store_many("foo" = 1, "bar" = 2)
fig$store_many("foo.bar.baz" = 1, .split = TRUE)
fig$store_many("foo" = "a", "baz" = 123, .purge = TRUE, .split = TRUE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_env_prefix"></a>}}
\if{latex}{\out{\hypertarget{method-update_env_prefix}{}}}
\subsection{Method \code{update_env_prefix()}}{
Update prefix for system environment variables
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$update_env_prefix(env_prefix)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env_prefix}}{(character) A prefix to be prepended to a key before
system environment lookup. Pass an empty string to reset.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{fig <- Fig$new()
fig$update_env_prefix("RCONNECT_")
# Reset by passing an empty string
fig$update_env_prefix("")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Fig$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
